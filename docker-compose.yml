version: '3.8'

services:
  postgres:
    image: postgres:14
    container_name: postgres
    ports:
      - "5432:5432"
    volumes:
      - ./volumes/postgres/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
      - ./volumes/postgres/sql/:/docker-entrypoint-initdb.d/sql/
      - ./volumes/postgres/conf/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./volumes/postgres/conf/pg_hba.conf:/etc/postgresql/pg_hba.conf
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    healthcheck:
      test: pg_isready -U postgres
      interval: 10s
      timeout: 3s
      retries: 3
    restart: always

  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:7.4.1
    restart: always
    hostname: zoo
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: "2181"
      ZOOKEEPER_SERVER_ID: "1"
      ZOOKEEPER_SERVERS: "zoo:2888:3888"

  kafka:
    image: confluentinc/cp-kafka:7.4.1
    container_name: kafka
    hostname: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    healthcheck:
      test: [ "CMD-SHELL", "cub kafka-ready -b kafka:9092 1 10" ]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: always

  kafka-init:
    image: confluentinc/cp-kafka:7.4.1
    container_name: kafka-init
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - ./volumes/kafka/scripts:/scripts
    command: [ "bash", "-c", "chmod +x /scripts/create-topics.sh && /scripts/create-topics.sh" ]

  kafkaui:
    image: obsidiandynamics/kafdrop:latest
    container_name: kafkaui
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8282:9000"
    environment:
      KAFKA_BROKERCONNECT: 127.0.0.1:9092,kafka:19092
      JVM_OPTS: "-Xms32M -Xmx64M"
      SERVER_SERVLET_CONTEXTPATH: "/"
    restart: always

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:v0.7.2
    restart: always
    hostname: kafka-ui
    ports:
      - "8181:8080"
    environment:
      DYNAMIC_CONFIG_ENABLED: "true"
    volumes:
      - "./volumes/kafka-ui/:/etc/kafkaui/"

  wiremock:
    image: wiremock/wiremock:3.12.1-1-alpine
    container_name: wiremock
    restart: always
    ports:
      - "8585:8080"
    volumes:
      - ./volumes/wiremock/stubs:/home/wiremock
    command: [ "--verbose" ]

  nexus:
    image: sonatype/nexus3:3.79.1-java17-ubi
    container_name: nexus
    ports:
      - "8686:8081"
    volumes:
      - nexus-data:/nexus-data
    environment:
      - INSTALL4J_ADD_VM_PARAMS=-Xms1200m -Xmx1200m -XX:MaxDirectMemorySize=2g
    restart: unless-stopped

volumes:
  nexus-data: {}
